#![feature(test)]

extern crate test;

use base64ct::{Base64, Encoding};
use num_bigint::BigUint;
use num_traits::{FromPrimitive, Num};
use rand_chacha::{rand_core::SeedableRng, ChaCha8Rng};
use rsa::{Pkcs1v15Encrypt, Pkcs1v15Sign, RsaPrivateKey};
use sha2::{Digest, Sha256};
use test::Bencher;

const DECRYPT_VAL: &str = "\
    XW4qfrpQDarEMBfPyIYE9UvuOFkbBi0tiGYbIOJPLMNe/LWuPD0BQ7ceqlOlPPcK\
    LinYz0DlnqW3It/V7ae59zw9afA3YIWdq0Ut2BnYL+aJixnqaP+PjsQNcHg6axCF\
    11iNQ4jpXrZDiQcI+q9EEzZDTMsiMxtjfgBQUd8LHT87YoQXDWaFPCVpliACMc8a\
    Uk442kH1tc4jEuXwjEjFErvAM/J7VizCdU/dnKrlq2mBDzvZ6hxY9TYHFB/zY6DZ\
    PJAgEMUxYWCR9xPJ7X256DV1Kt0Ht33DWoFcgh/pPLM1q9pK0HVxCdclXfZOeCql\
    rLgZ5Gxv5DM4BtV7Z4m85w==";

fn get_key() -> RsaPrivateKey {
    RsaPrivateKey::from_components(
        BigUint::from_str_radix(
            "1431413293124100665099808488927402060891804903267185832598839685\
             1334124245188214251956198731333464217832226406088020736932173064\
             7542143290099799440376409121279434889726446974231909555574359107\
             6769071277846352498366785281901025949969517731311544711611035852\
             4558307947613422897787329221478860907963827160223559690523660574\
             3290119275312896557118605046305737666092393325692108313256338401\
             7468394455366735221967093040859332166137547388514797387908699400\
             6440025257225431977751512374815915392249179976902953721486040787\
             7928018498182544654866337918267668730766171167270730778215846767\
             15609985777563958286637185868165868520557",
            10,
        )
        .unwrap(),
        BigUint::from_u32(3).unwrap(),
        BigUint::from_str_radix(
            "9542755287494004433998723259516013739278699355114572217325597900\
             8894161634588095013041324875556428118881509373920138246214487098\
             3614288600665329602509394141862899264842979828212730370495727384\
             5127141852309016655778568546006839666463451542076964744073572349\
             7055386317422819318582194809859072719758847734823729668476398538\
             9789061545660559807108818983867672883683301225406598325963853810\
             7719766738032720239892094196108713378822882383694456030043492571\
             0634419438471959395497732716946476575496586033656294586102738212\
             9223264633471761267451999753390105279033427966175417649059304194\
             1863932308687197618671528035670452762731",
            10,
        )
        .unwrap(),
        vec![
            BigUint::from_str_radix(
                "1309032551829967224267716136060777552955833291350673401529471728\
                 6841580902753737630619317962429887421560827080205434760983677647\
                 3930072411958753044562214537013874103802006369634761074377213995\
                 9838767887180338501537194216954687042766949830326444169308790939\
                 14927146648402139231293035971427838068945045019075433",
                10,
            )
            .unwrap(),
            BigUint::from_str_radix(
                "1093489456104854535775747676525274729242892295382866496612409389\
                 8802036700547572798825343864756095857350615944953879354047282981\
                 5903949343191091817779240101054552748665267574271163617694640513\
                 5496938413378206027265967563510061495188309322612466987663553478\
                 98158548465400674856021497190430791824869615170301029",
                10,
            )
            .unwrap(),
        ],
    )
    .unwrap()
}

#[bench]
fn bench_rsa_2048_pkcsv1_decrypt(b: &mut Bencher) {
    let priv_key = get_key();
    let x = Base64::decode_vec(DECRYPT_VAL).unwrap();

    b.iter(|| {
        let res = priv_key.decrypt(Pkcs1v15Encrypt, &x).unwrap();
        test::black_box(res);
    });
}

#[bench]
fn bench_rsa_2048_pkcsv1_sign_blinded(b: &mut Bencher) {
    let priv_key = get_key();
    let digest = Sha256::digest(b"testing").to_vec();
    let mut rng = ChaCha8Rng::from_seed([42; 32]);

    b.iter(|| {
        let res = priv_key
            .sign_with_rng(&mut rng, Pkcs1v15Sign::new::<Sha256>(), &digest)
            .unwrap();
        test::black_box(res);
    });
}

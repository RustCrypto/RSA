use crate::{node::Node, spec::Spec};

use std::collections::BTreeMap;

use proc_macro2::{Ident, Span, TokenStream};
use quote::quote;

#[derive(Clone, Debug, Default)]
pub struct Root(BTreeMap<Ident, Spec>);

impl Root {
    pub fn add(&mut self, spec: &str, name: &str, obid: &str) {
        let name = name.trim().to_string();
        let obid = obid.trim().to_string();
        let spec = spec.trim().to_ascii_lowercase();
        let spec = Ident::new(&spec, Span::call_site());

        self.0
            .entry(spec)
            .or_insert_with(Spec::default)
            .insert(Node::new(obid, name));
    }

    pub fn module(&self) -> TokenStream {
        let mut mods = TokenStream::default();
        let mut recs = TokenStream::default();

        for (spec, s) in &self.0 {
            mods.extend(s.module(spec));
            recs.extend(s.records(quote! { &#spec }));
        }

        quote! {
            #![doc = "!! DO NOT EDIT !!: This file is auto-generated by oiddbgen."]

            #mods

            pub const DB: super::Database<'static> = super::Database(&[
                #recs
            ]);
        }
    }
}
